import React, { useState } from 'react';

function Projects() {
  const [selectedProject, setSelectedProject] = useState(null);
  const [currentImageIndex, setCurrentImageIndex] = useState(0);
  const [isPlaying, setIsPlaying] = useState(true);

  const projects = [
    {
      id: 1,
      title: "E-Commerce ÏÑúÎπÑÏä§ Í∏∞Ìöç",
      description: "Ïã†Í∑ú Ïù¥Ïª§Î®∏Ïä§ ÌîåÎû´ÌèºÏùò Ï†ÑÏ≤¥ ÏÑúÎπÑÏä§ Í∏∞Ìöç Î∞è UX/UI ÏÑ§Í≥Ñ. ÏÇ¨Ïö©Ïûê Î¶¨ÏÑúÏπòÎ∂ÄÌÑ∞ ÌîÑÎ°úÌÜ†ÌÉÄÏûÖ Ï†úÏûëÍπåÏßÄ Ï†Ñ Í≥ºÏ†ï Ï£ºÎèÑ.",
      technologies: ["ÏÑúÎπÑÏä§ Í∏∞Ìöç", "UX/UI ÏÑ§Í≥Ñ", "Figma", "ÏÇ¨Ïö©Ïûê Î¶¨ÏÑúÏπò"],
      image: "üõí",
      github: "#",
      live: "#",
      detailedDescription: "Ïù¥Ïª§Î®∏Ïä§ ÌîåÎû´ÌèºÏùò Ï†ÑÏ≤¥ ÏÑúÎπÑÏä§ Í∏∞Ìöç ÌîÑÎ°úÏ†ùÌä∏ÏûÖÎãàÎã§. ÏÇ¨Ïö©Ïûê Î¶¨ÏÑúÏπòÎ•º ÌÜµÌï¥ Í≥†Í∞ù ÎãàÏ¶àÎ•º ÌååÏïÖÌïòÍ≥†, Í≤ΩÏüÅÏÇ¨ Î∂ÑÏÑùÏùÑ ÌÜµÌï¥ Ï∞®Î≥ÑÌôî Ìè¨Ïù∏Ìä∏Î•º ÎèÑÏ∂úÌñàÏäµÎãàÎã§. FigmaÎ•º ÌôúÏö©Ìïú ÌîÑÎ°úÌÜ†ÌÉÄÏûÖ Ï†úÏûëÍ≥º ÏÇ¨Ïö©Ïûê ÌÖåÏä§Ìä∏Î•º ÌÜµÌï¥ ÏÑúÎπÑÏä§Ïùò ÏôÑÏÑ±ÎèÑÎ•º ÎÜíÏòÄÏäµÎãàÎã§.",
      images: [
        "https://via.placeholder.com/800x600/667eea/ffffff?text=E-Commerce+Design+1",
        "https://via.placeholder.com/800x600/764ba2/ffffff?text=User+Research+Results",
        "https://via.placeholder.com/800x600/667eea/ffffff?text=Prototype+Screens"
      ]
    },
    {
      id: 2,
      title: "Î™®Î∞îÏùº Ïï± ÌîÑÎ°úÎçïÌä∏ Îß§ÎãàÏ†Ä",
      description: "Ïä§ÌÉÄÌä∏ÏóÖÏóêÏÑú Î™®Î∞îÏùº Ïï±Ïùò PM Ïó≠Ìï† ÏàòÌñâ. Ïï†ÏûêÏùº Î∞©Î≤ïÎ°†ÏùÑ ÌôúÏö©Ìïú Ï†úÌíà Í∞úÎ∞ú Î∞è ÌåÄ Î¶¨ÎçîÏã≠ Í≤ΩÌóò.",
      technologies: ["Product Management", "Ïï†ÏûêÏùº/Ïä§ÌÅ¨Îüº", "ÌåÄ Î¶¨ÎçîÏã≠", "Îç∞Ïù¥ÌÑ∞ Î∂ÑÏÑù"],
      image: "üìã",
      github: "#",
      live: "#",
      detailedDescription: "Ïä§ÌÉÄÌä∏ÏóÖ ÌôòÍ≤ΩÏóêÏÑú Î™®Î∞îÏùº Ïï±Ïùò ÌîÑÎ°úÎçïÌä∏ Îß§ÎãàÏ†Ä Ïó≠Ìï†ÏùÑ ÏàòÌñâÌñàÏäµÎãàÎã§. Ïï†ÏûêÏùº/Ïä§ÌÅ¨Îüº Î∞©Î≤ïÎ°†ÏùÑ ÎèÑÏûÖÌïòÏó¨ Í∞úÎ∞ú ÌîÑÎ°úÏÑ∏Ïä§Î•º Í∞úÏÑ†ÌïòÍ≥†, ÌåÄ Î¶¨ÎçîÏã≠ÏùÑ ÌÜµÌï¥ ÌîÑÎ°úÏ†ùÌä∏Î•º ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏôÑÎ£åÌñàÏäµÎãàÎã§. Îç∞Ïù¥ÌÑ∞ Î∂ÑÏÑùÏùÑ ÌÜµÌïú Ï†úÌíà Í∞úÏÑ†Í≥º ÏÇ¨Ïö©Ïûê ÌîºÎìúÎ∞± Î∞òÏòÅÏùÑ Ï£ºÎèÑÌñàÏäµÎãàÎã§.",
      images: [
        "https://via.placeholder.com/800x600/764ba2/ffffff?text=Mobile+App+Screens",
        "https://via.placeholder.com/800x600/667eea/ffffff?text=Agile+Process",
        "https://via.placeholder.com/800x600/764ba2/ffffff?text=Team+Leadership"
      ]
    },
    {
      id: 3,
      title: "Ïõπ ÏÑúÎπÑÏä§ UX Í∞úÏÑ† ÌîÑÎ°úÏ†ùÌä∏",
      description: "Í∏∞Ï°¥ Ïõπ ÏÑúÎπÑÏä§Ïùò ÏÇ¨Ïö©ÏÑ± Í∞úÏÑ† ÌîÑÎ°úÏ†ùÌä∏. ÏÇ¨Ïö©Ïûê ÌÖåÏä§Ìä∏Î•º ÌÜµÌïú Î¨∏Ï†úÏ†ê ÎèÑÏ∂ú Î∞è Í∞úÏÑ†Ïïà ÏÑ§Í≥Ñ.",
      technologies: ["UX Í∞úÏÑ†", "ÏÇ¨Ïö©Ïûê ÌÖåÏä§Ìä∏", "HTML/CSS", "ÌîÑÎ°úÌÜ†ÌÉÄÏù¥Ìïë"],
      image: "üå§Ô∏è",
      github: "#",
      live: "#",
      detailedDescription: "Í∏∞Ï°¥ Ïõπ ÏÑúÎπÑÏä§Ïùò ÏÇ¨Ïö©ÏÑ±ÏùÑ Í∞úÏÑ†ÌïòÎäî ÌîÑÎ°úÏ†ùÌä∏Î•º ÏßÑÌñâÌñàÏäµÎãàÎã§. ÏÇ¨Ïö©Ïûê ÌÖåÏä§Ìä∏Î•º ÌÜµÌï¥ ÌòÑÏû¨ ÏÑúÎπÑÏä§Ïùò Î¨∏Ï†úÏ†êÏùÑ ÎèÑÏ∂úÌïòÍ≥†, Í∞úÏÑ†ÏïàÏùÑ ÏÑ§Í≥ÑÌñàÏäµÎãàÎã§. HTML/CSSÎ•º ÌôúÏö©Ìïú ÌîÑÎ°úÌÜ†ÌÉÄÏù¥ÌïëÍ≥º Ïã§Ï†ú Íµ¨ÌòÑÏùÑ ÌÜµÌï¥ ÏÇ¨Ïö©Ïûê Í≤ΩÌóòÏùÑ ÌÅ¨Í≤å Í∞úÏÑ†ÌñàÏäµÎãàÎã§.",
      images: [
        "https://via.placeholder.com/800x600/667eea/ffffff?text=Before+UX+Improvement",
        "https://via.placeholder.com/800x600/764ba2/ffffff?text=After+UX+Improvement",
        "https://via.placeholder.com/800x600/667eea/ffffff?text=User+Testing+Results"
      ]
    },
    {
      id: 4,
      title: "Îç∞Ïù¥ÌÑ∞ Í∏∞Î∞ò ÏÑúÎπÑÏä§ Í∏∞Ìöç",
      description: "ÎπÖÎç∞Ïù¥ÌÑ∞ Î∂ÑÏÑùÏùÑ ÌÜµÌïú ÏÉàÎ°úÏö¥ ÏÑúÎπÑÏä§ Í∏∞Ìöç. ÏÇ¨Ïö©Ïûê ÌñâÎèô Ìå®ÌÑ¥ Î∂ÑÏÑù Î∞è Ïù∏ÏÇ¨Ïù¥Ìä∏ ÎèÑÏ∂ú.",
      technologies: ["Îç∞Ïù¥ÌÑ∞ Î∂ÑÏÑù", "ÏÑúÎπÑÏä§ Í∏∞Ìöç", "SQL", "Tableau"],
      image: "üå§Ô∏è",
      github: "#",
      live: "#",
      detailedDescription: "ÎπÖÎç∞Ïù¥ÌÑ∞ Î∂ÑÏÑùÏùÑ ÌÜµÌï¥ ÏÉàÎ°úÏö¥ ÏÑúÎπÑÏä§Î•º Í∏∞ÌöçÌïòÎäî ÌîÑÎ°úÏ†ùÌä∏ÏûÖÎãàÎã§. ÏÇ¨Ïö©Ïûê ÌñâÎèô Ìå®ÌÑ¥ÏùÑ Î∂ÑÏÑùÌïòÏó¨ Ïù∏ÏÇ¨Ïù¥Ìä∏Î•º ÎèÑÏ∂úÌïòÍ≥†, Ïù¥Î•º Î∞îÌÉïÏúºÎ°ú ÏÉàÎ°úÏö¥ ÏÑúÎπÑÏä§ ÏïÑÏù¥ÎîîÏñ¥Î•º Ï†úÏïàÌñàÏäµÎãàÎã§. SQLÍ≥º TableauÎ•º ÌôúÏö©Ìïú Îç∞Ïù¥ÌÑ∞ ÏãúÍ∞ÅÌôîÎ•º ÌÜµÌï¥ Ïù¥Ìï¥Í¥ÄÍ≥ÑÏûêÎì§ÏóêÍ≤å Ìö®Í≥ºÏ†ÅÏúºÎ°ú ÏïÑÏù¥ÎîîÏñ¥Î•º Ï†ÑÎã¨ÌñàÏäµÎãàÎã§.",
      images: [
        "https://via.placeholder.com/800x600/764ba2/ffffff?text=Data+Analysis+Results",
        "https://via.placeholder.com/800x600/667eea/ffffff?text=User+Behavior+Patterns",
        "https://via.placeholder.com/800x600/764ba2/ffffff?text=Service+Proposal"
      ]
    }
  ];

  const openPopup = (project) => {
    setSelectedProject(project);
    setCurrentImageIndex(0);
    setIsPlaying(true);
    document.body.style.overflow = 'hidden';
  };

  const closePopup = () => {
    setSelectedProject(null);
    setCurrentImageIndex(0);
    setIsPlaying(false);
    document.body.style.overflow = 'unset';
  };

  const nextImage = () => {
    if (selectedProject) {
      setCurrentImageIndex((prev) => 
        prev === selectedProject.images.length - 1 ? 0 : prev + 1
      );
    }
  };

  const prevImage = () => {
    if (selectedProject) {
      setCurrentImageIndex((prev) => 
        prev === 0 ? selectedProject.images.length - 1 : prev - 1
      );
    }
  };

  const togglePlayPause = () => {
    setIsPlaying(!isPlaying);
  };

  // ÏûêÎèô Ïä¨ÎùºÏù¥Îìú Ìö®Í≥º
  React.useEffect(() => {
    let interval;
    if (isPlaying && selectedProject) {
      interval = setInterval(() => {
        nextImage();
      }, 5000); // 3Ï¥àÏóêÏÑú 5Ï¥àÎ°ú Î≥ÄÍ≤Ω
    }
    return () => clearInterval(interval);
  }, [isPlaying, selectedProject, currentImageIndex]);

  return (
    <>
      <section id="projects" className="projects">
        <div className="container">
          <h2>Projects & Experience</h2>
          <div className="projects-grid">
            {projects.map(project => (
              <div key={project.id} className="project-card card">
                <div className="project-header">
                  <div className="project-icon">
                    <span>{project.image}</span>
                  </div>
                  <h3 className="project-title">{project.title}</h3>
                </div>
                
                <p className="project-description">{project.description}</p>
                
                <div className="project-tech">
                  {project.technologies.map(tech => (
                    <span key={tech} className="tech-tag">{tech}</span>
                  ))}
                </div>
                
                <div className="project-links">
                  <a 
                    href="#" 
                    onClick={(e) => {
                      e.preventDefault();
                      openPopup(project);
                    }}
                    className="project-link github"
                  >
                    <span>ÏÉÅÏÑ∏Î≥¥Í∏∞</span>
                  </a>
                  <a 
                    href={project.live} 
                    target="_blank" 
                    rel="noopener noreferrer"
                    className="project-link live"
                  >
                    <span>Í≤∞Í≥ºÎ¨º</span>
                  </a>
                </div>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* Popup Modal */}
      {selectedProject && (
        <div className="popup-overlay" onClick={closePopup}>
          <div className="popup-content" onClick={(e) => e.stopPropagation()}>
            <button className="close-button" onClick={closePopup}>
              <span></span>
              <span></span>
            </button>
            
            <div className="popup-header">
              <h2>{selectedProject.title}</h2>
            </div>
            
            <div className="image-slider">
              <div className="slider-container">
                <img 
                  src={selectedProject.images[currentImageIndex]} 
                  alt={`${selectedProject.title} - Image ${currentImageIndex + 1}`}
                  className="slider-image"
                />
                
                <button className="slider-nav prev" onClick={prevImage}>
                  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M15 18L9 12L15 6" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                  </svg>
                </button>
                <button className="slider-nav next" onClick={nextImage}>
                  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M9 18L15 12L9 6" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                  </svg>
                </button>
              </div>
              
              <div className="slider-controls">
                <div className="pagination">
                  {selectedProject.images.map((_, index) => (
                    <button
                      key={index}
                      className={`pagination-dot ${index === currentImageIndex ? 'active' : ''}`}
                      onClick={() => setCurrentImageIndex(index)}
                    ></button>
                  ))}
                </div>
                
                <button className="play-pause-btn" onClick={togglePlayPause}>
                  <div className={`play-pause-icon ${isPlaying ? 'pause' : 'play'}`}>
                    <div className="play-pause-inner"></div>
                  </div>
                </button>
              </div>
            </div>
            
            <div className="popup-description">
              <p>{selectedProject.detailedDescription}</p>
            </div>
            
            <div className="popup-tech">
              {selectedProject.technologies.map(tech => (
                <span key={tech} className="tech-tag">{tech}</span>
              ))}
            </div>
          </div>
        </div>
      )}
    </>
  );
}

export default Projects;
